@page
@model site.Pages.MessagerModel
@{
    ViewData["Title"] = "Регистрация";
}



<style>
    input:required:user-valid {
        border-color: limegreen;
        border-radius: 2px;
    }

    input:required:user-invalid {
        border-color: red;
        border-radius: 2px;
    }
</style>

<form method="post">

    
    
    <div class="form-group">
        <label asp-for="newmsg.message" class="control-label "></label>
        <input asp-for="newmsg.message" class="form-control"  required />
        <span asp-validation-for="newmsg.message" class="text-danger"></span>
    </div>


   

   

   

    
   
    <div class="form-group">
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</form>







@* <form  id="123" runat="server">
    <p>Имя:     <input pattern="[А-ЯЁ][а-яё]*" type="text" name="name" required/></p>
    <p>Фамилия: <input pattern="[А-ЯЁ][а-яё]*" type="text" name="surname" required/></p>
    <p>Возраст: <input type="number" name="age" min=18 max=99 required/></p>
    <p>Email:   <input type="email" name="email"/></p>
    <p>Пароль:  <input type="password" name="password" required/></p>
    <p>Телефон: <input class="tel" type="text" name="tel" required/></p>
    <p><input type="submit"/></p>
</form> *@


<div id="messages">

</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script>
    function displayMessages(messages) {
        const messagesContainer = document.getElementById('messages');

        // Очистка контейнера сообщений перед отображением новых сообщений
        messagesContainer.innerHTML = '';

        // Добавление каждого сообщения в контейнер
        messages.forEach(message => {
            const messageElement = document.createElement('div');
            messageElement.classList.add('post', 'post_type_reply');

            const detailsElement = document.createElement('div');
            detailsElement.classList.add('post__details');

            const anonElement = document.createElement('span');
            anonElement.classList.add('post__detailpart', 'post__user');
            anonElement.textContent = message.name;
            detailsElement.appendChild(anonElement);

            const timeElement = document.createElement('span');
            timeElement.classList.add('post__detailpart', 'post__time');
            timeElement.textContent = moment(new Date(message.date)).format("YYYY-MM-DD HH:mm:ss"); // Предполагается, что у сообщения есть свойство timestamp с датой и временем
            detailsElement.appendChild(timeElement);

            messageElement.appendChild(detailsElement);

            const articleElement = document.createElement('article');
            articleElement.classList.add('post__message');
            articleElement.textContent = message.message; // Предполагается, что у сообщения есть свойство text с текстом сообщения
            messageElement.appendChild(articleElement);

            messagesContainer.appendChild(messageElement);
        });
    }

    // Пример получения сообщений с сервера и их отображения
    async function updateMessages() {
        try {
            const url = '/api/message'; // Замените это на URL вашего API
            const response = await fetch(url);

            if (!response.ok) {
                throw new Error(`Ошибка HTTP: ${response.status}`);
            }

            const messages = await response.json();
            displayMessages(messages); // Отображение полученных сообщений
        } catch (error) {
            console.error('Произошла ошибка при обновлении сообщений:', error);
        }
    }

    // Выполнение функции updateMessages каждую секунду
    setInterval(updateMessages, 1000);

</script>


<script>
    window.addEventListener("DOMContentLoaded", function() {
      [].forEach.call( document.querySelectorAll('.tel'), function(input) {
        var keyCode;
        function mask(event) {
          event.keyCode && (keyCode = event.keyCode);
          var pos = this.selectionStart;
          if (pos < 3) event.preventDefault();
          var matrix = "+7 (___) ___ ____",
              i = 0,
              def = matrix.replace(/\D/g, ""),
              val = this.value.replace(/\D/g, ""),
              new_value = matrix.replace(/[_\d]/g, function(a) {
                  return i < val.length ? val.charAt(i++) : a
              });
          i = new_value.indexOf("_");
          if (i != -1) {
              i < 5 && (i = 3);
              new_value = new_value.slice(0, i)
          }
          var reg = matrix.substr(0, this.value.length).replace(/_+/g,
              function(a) {
                  return "\\d{1," + a.length + "}"
              }).replace(/[+()]/g, "\\$&");
          reg = new RegExp("^" + reg + "$");
          if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) {
            this.value = new_value;
          }
          if (event.type == "blur" && this.value.length < 5) {
            this.value = "";
          }
        }

        input.addEventListener("input", mask, false);
        input.addEventListener("focus", mask, false);
        input.addEventListener("blur", mask, false);
        input.addEventListener("keydown", mask, false);

      });
    });
</script>






